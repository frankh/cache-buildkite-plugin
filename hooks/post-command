#!/bin/bash
# shellcheck disable=SC2001
set -euo pipefail

if [[ "${BUILDKITE_PLUGIN_CACHE_DEBUG:-false}" =~ (true|on|1) ]] ; then
  set -x
fi

if [[ -n "${BUILDKITE_PLUGIN_CACHE_CACHE_KEY:-}" ]] ; then

  cache_key_prefix=$(echo "$BUILDKITE_PLUGIN_CACHE_CACHE_KEY" | sed -e 's/{.*//')
  template_value=$(echo "$BUILDKITE_PLUGIN_CACHE_CACHE_KEY" | sed -e 's/^[^\{{]*[^A-Za-z]*//' -e 's/.}}.*$//' | tr -d \' | tr -d \")

  if [[ $template_value == *"checksum"* ]]; then
    checksum_argument=$(echo "$template_value" | sed -e 's/checksum*//')
    function=${template_value/"checksum"/"shasum"}
    result=$($function | tr -d "$checksum_argument")
    cache_key="$cache_key_prefix$result"
  else
    cache_key=$BUILDKITE_PLUGIN_CACHE_CACHE_KEY
  fi

  bucket="${BUILDKITE_PLUGIN_CACHE_S3_BUCKET_NAME}/${BUILDKITE_ORGANIZATION_SLUG}/${BUILDKITE_PIPELINE_SLUG}/${cache_key}"

  paths=()
  while IFS='=' read -r path _ ; do
    if [[ $path =~ ^(BUILDKITE_PLUGIN_CACHE_PATHS_[0-9]+) ]] ; then
      paths+=("${!path}")
    fi
  done < <(env | sort | grep BUILDKITE_PLUGIN_CACHE_PATHS_)

  tmpdir=$(mktemp -d)
  if [[ "${BUILDKITE_PLUGIN_CACHE_RESTORED:-}" == *":$cache_key:"* ]]; then
    echo "Not uploading new cache - it was restored"
    exit 0
  fi

  echo "Compressing cache for $cache_key"
  tar -czf $tmpdir/cache.tar.gz ${paths[@]} || echo "tar failed"

  echo "Saving cache ${cache_key}"
  aws s3 sync "$tmpdir/" "s3://${bucket}/" --delete
  rm -rf $tmpdir
fi
